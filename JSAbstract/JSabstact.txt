/* javascript good parts */

/*--------------------------*/

var arr = {
    fist: "vasa",
    second: "pupkin"
};
alert(arr.fist);
alert(arr['second']);
alert(arr[0]);// undefined не знаю почему

/*--------------------------*/

flight.hasOwnProperty('number') // true. в объекте flight есть свойство "number"

/*--------------------------*/

var myObject = {
    value: 0,
    increment: function (inc) {
        this.value += typeof inc === 'number' ? inc : 1; //вначале идет проверка на тип
    }
};

/*--------------------------*/

var sum = add(3, 4); // sum is 7// When a function is invoked with this pattern, this is bound to the global object. !!!
This was a mistake in the design of the language.
A consequence of this error is that a method cannot
employ an inner function to help it do its work because the inner function does not
share the method’s access to the object as its this is bound to the wrong value.

БОЛЕЕ ПОДРОБНО ПРО ОШИБКУ JS ЧИТАТЬ В The Function Invocation Pattern


/*--------------------------*/

//PROTOTYPE

function array_max( ){
    var i, max = this[0];
    for (i = 1; i < this.length; i++) {
        if (max < this[i])
        max = this[i];
    }
    return max;
}
Array.prototype.max = array_max;

// а теперь создадим новый массив
// и запустим новый метод
var x = [ 1, 2, 100, 3, 4, 5, 6];
var y = x.max( );
alert(y);


/*--------------------------*/

//первый вариант - стандартный объект
var myObject = function ( ) {
    var value = 0;
    return {
        increment: function (inc) {
            value += typeof inc === 'number' ? inc : 1;
        },
        getValue: function ( ) {
            return value;
        }
    };
};

var ob1 = myObject();
ob1.increment(11);
alert(ob1.getValue()); //11

//второй вариант - без создания нового объекта
var myObject2 = function ( ) {
    var value = 0;
    return {
        increment: function (inc) {
            value += typeof inc === 'number' ? inc : 1;
        },
        getValue: function ( ) {
            return value;
        }
    };
} (); // !!!!!! выполнили функцию и результат присвоили функции myObject2!!!!!!!!!!

myObject2.increment(100);
alert (myObject2.getValue());//100


/*--------------------------*/
//Callbacks


//медленно
request = prepare_the_request( );
response = send_request_synchronously(request);
display(response);

//быстро
request = prepare_the_request( );
send_request_asynchronously(request, function (response) {
display(response);
});



/*--------------------------*/


//не понял что такое module pattern JS разобратья!!!



/*--------------------------*/


//   !!!REGULAR EXPRESSION!!!


var parse_url = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
var url = "http://www.ora.com:80/goodparts?q#fragment";
var result = parse_url.exec(url);
var names = ['url', 'scheme', 'slash', 'host', 'port', 'path', 'query', 'hash'];
var blanks = ' ';
var i;
for (i = 0; i < names.length; i += 1) {
    alert (names[i] + ': '  + result[i]);
}

//result
// url: http://www.ora.com:80/goodparts?q#fragment
// scheme: http
// slash: //
// host: www.ora.com
// port: 80
// path: goodparts
// query: q
// hash: fragment


/*--------------------------*/

//определить, что переменная - массив

if (my_value && typeof my_value === 'object' &&
typeof my_value.length === 'number' &&
!(my_value.propertyIsEnumerable('length')) {
// my_value is truly an array!
}

/*--------------------------*/

FOR IN ПОИСК ПО СВОЙСТВАМ В ОБЪЕКТЕ НЕ ЗАХОДЯ К РОДИТЕЛЯМ

var buz = {
  fog: 'stack'
};

for (var name in buz) {
  if (buz.hasOwnProperty(name)) {
    alert('это точно туман (' + name + '). Значение: ' + buz[name]);
  }
  else {
    alert(name); // toString или что-то ещё
  }
}

/*--------------------------*/
/*--------------------------*/
/*--------------------------*/
/*--------------------------*/

Constructors and new
p 123!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

/*--------------------------*/
/*--------------------------*/
/*--------------------------*/
/*--------------------------*/

var numbers = prompt("enter numbers", "1, 5, 3, 8, 2, 6, 7");
numbers = JSON.parse("[" + numbers + "]");

/*--------------------------*/

замена текста в HTML

var el = document.getElementById('greeting');
el.textContent = "Hi nigga";

/*--------------------------*/
//статические методы

function Article() {
  Article.count++;

  //...
}
Article.count = 0;

Article.showCount = function() {
  alert( this.count ); // (1)
}

// использование
new Article();
new Article();
Article.showCount(); // (2)

/*--------------------------*/

//typeof


alert( typeof 1 );         // 'number'
alert( typeof true );      // 'boolean'
alert( typeof "Текст" );   // 'string'
alert( typeof undefined ); // 'undefined'
alert( typeof null );      // 'object' (ошибка в языке)
alert( typeof alert );     // 'function'
alert( typeof {} ); // 'object'
alert( typeof [] ); // 'object'
alert( typeof new Date ); // 'object'

/*--------------------------*/
/*--------------------------*/
/*--------------------------*/

//красивое определение типов

alert( {}.toString.call(123) ); // [object Number]
alert( {}.toString.call("строка") ); // [object String]

//или сделать метод
unction getClass(obj) {
  return {}.toString.call(obj).slice(8, -1);
}

alert( getClass(new Date) ); // Date
alert( getClass([1, 2, 3]) ); // Array


//проверка на тип массива
alert( Array.isArray([1,2,3]) ); // true
alert( Array.isArray("not array")); // false




/*--------------------------*/
/*--------------------------*/
/*--------------------------*/


//instanceof

function User() {}

var user = new User();

alert( user instanceof User ); // true

/*--------------------------*/

// утиная типизация
//https://learn.javascript.ru/class-instanceof#%D1%83%D1%82%D0%B8%D0%BD%D0%B0%D1%8F-%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F
//магия

/*--------------------------*/

//parse to JSON

// дата в строке - в формате UTC
var str = '{"title":"Конференция","date":"2014-11-30T12:00:00.000Z"}';

var event = JSON.parse(str, function(key, value) {
  if (key == 'date') return new Date(value);
  return value;
});

alert( event.date.getDate() ); // теперь сработает!

//МАГИЯ
var schedule = '{ \
  "events": [ \
    {"title":"Конференция","date":"2014-11-30T12:00:00.000Z"}, \
    {"title":"День рождения","date":"2015-04-18T12:00:00.000Z"} \
  ]\
}';

schedule = JSON.parse(schedule, function(key, value) {
  if (key == 'date') return new Date(value);
  return value;
});

alert( schedule.events[1].date.getDate() ); // сработает!

//JSON to String
var event = {
  title: "Конференция",
  date: "сегодня"
};

var str = JSON.stringify(event);
alert( str ); // {"title":"Конференция","date":"сегодня"}

// Обратное преобразование.
event = JSON.parse(str);

//исключение свойств
Во втором параметре JSON.stringify(value, replacer) можно указать массив свойств, которые подлежат сериализации.

Например:

 var user = {
  name: "Вася",
  age: 25,
  window: window
};

alert( JSON.stringify(user, ["name", "age"]) );
// {"name":"Вася","age":25}

//боее сложный вариант
var user = {
  name: "Вася",
  age: 25,
  window: window
};

var str = JSON.stringify(user, function(key, value) {
  if (key == 'window') return undefined;
  return value;
});

alert( str ); // {"name":"Вася","age":25}


//красивое форматирование
/*
Если он является числом – то уровни вложенности в JSON оформляются указанным количеством пробелов, если строкой – вставляется эта строка.
*/

var user = {
  name: "Вася",
  age: 25,
  roles: {
    isAdmin: false,
    isEditor: true
  }
};

var str = JSON.stringify(user, "", 4);

alert( str );
/* Результат -- красиво сериализованный объект:
{
    "name": "Вася",
    "age": 25,
    "roles": {
        "isAdmin": false,
        "isEditor": true
    }
}
*/

/*--------------------------*/

//timeout

function func() {
  alert( 'Привет' );
}

setTimeout(func, 1000);

function func(phrase, who) {
  alert( phrase + ', ' + who );
}

setTimeout(func, 1000, "Привет", "Вася"); // Привет, Вася


setTimeout("alert('Привет')", 1000);
/*
Однако, использование строк не рекомендуется, так как они могут вызвать проблемы при минимизации кода, и, вообще, сама возможность использовать строку сохраняется лишь для совместимости.
Вместо них используйте анонимные функции, вот так:
*/
setTimeout(function() { alert('Привет') }, 1000);


/*--------------------------*/
/*--------------------------*/
/*--------------------------*/
//наследование


function Machine(power) {
  this._power = power; // (1)

  this._enabled = false;

  this.enable = function() {
    this._enabled = true;
  };

  this.disable = function() {
    this._enabled = false;
  };
}

function CoffeeMachine(power) {
  Machine.apply(this, arguments); // (2)

  alert( this._enabled ); // false
  alert( this._power ); // 10000
}

var coffeeMachine = new CoffeeMachine(10000);

/*--------------------------*/
//наследование
//не работект в ИЭ10

var animal = {
  eats: true
};

var rabbit = {
  jumps: true,
  __proto__: animal
};

for (var key in rabbit) {
  alert( key + " = " + rabbit[key] ); // выводит и "eats" и "jumps"
}

/*--------------------------*/
//наследование
//не работект в ИЭ10

var animal = {
  eats: true
};
var rabbit = {
  jumps: true,
  eats: false
};

rabbit.__proto__ = animal;

alert( rabbit.eats ); // false, свойство взято из rabbit

/*--------------------------*/
//create(null)


var data = Object.create(null);
data.text = "Привет";

alert(data.text); // Привет
alert(data.toString); // undefined

/*Объект, создаваемый при помощи Object.create(null) не имеет прототипа, а значит в нём нет лишних свойств. Для коллекции – как раз то, что надо.*/

/*--------------------------*/


var animal = {
  eats: true
};

function Rabbit(name) {
  this.name = name;
}

Rabbit.prototype = animal;

var rabbit = new Rabbit("Кроль"); //  rabbit.__proto__ == animal

alert( rabbit.eats ); // true



/*--------------------------*/
//пример насделования классов



// 1. Конструктор Animal
function Animal(name) {
  this.name = name;
  this.speed = 0;
}

// 1.1. Методы -- в прототип

Animal.prototype.stop = function() {
  this.speed = 0;
  alert( this.name + ' стоит' );
}

Animal.prototype.run = function(speed) {
  this.speed += speed;
  alert( this.name + ' бежит, скорость ' + this.speed );
};

// 2. Конструктор Rabbit
function Rabbit(name) {
  this.name = name;
  this.speed = 0;

  /*
  Чтобы упростить поддержку кода, имеет смысл не дублировать код конструктора Animal, а напрямую вызвать его:
  function Rabbit(name) {
    Animal.apply(this, arguments);
  }
  */

}

// 2.1. Наследование
Rabbit.prototype = Object.create(Animal.prototype); //Rabbit.prototype = new Animal();
/*Частично, он рабочий, поскольку иерархия прототипов будет такая же, ведь new Animal – это объект с прототипом Animal.prototype, как и Object.create(Animal.prototype). Они в этом плане идентичны.
Но у этого подхода важный недостаток. Как правило мы не хотим создавать Animal, а хотим только унаследовать его методы!*/
Rabbit.prototype.constructor = Rabbit;

// 2.2. Методы Rabbit
Rabbit.prototype.jump = function() {
  this.speed++;
  alert( this.name + ' прыгает, скорость ' + this.speed );